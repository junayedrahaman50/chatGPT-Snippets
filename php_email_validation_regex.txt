To validate an email address using regular expression in PHP, you can use the preg_match function along with the appropriate regular expression pattern. Here is an example of a regular expression pattern that can be used to validate an email address:

php
Copy code
$email = "example@example.com";
if (!preg_match("/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/", $email)) {
    echo "Invalid email address";
} else {
    echo "Valid email address";
}
In the above example, the regular expression pattern /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/ is used to validate the email address. Here is a breakdown of the pattern:

^ - Start of the string
[a-zA-Z0-9._-]+ - One or more characters that can be alphabets (lowercase and uppercase), digits, period, underscore, or hyphen
@ - The '@' symbol
[a-zA-Z0-9.-]+ - One or more characters that can be alphabets (lowercase and uppercase), digits, period, or hyphen
\. - A period (escaped with a backslash to match a literal period)
[a-zA-Z]{2,} - Two or more alphabets (lowercase and uppercase)
$ - End of the string
This regular expression pattern checks for the following:

The email address should start with one or more alphabets (lowercase and uppercase), digits, period, underscore, or hyphen
The '@' symbol should be present
After the '@' symbol, there should be one or more alphabets (lowercase and uppercase), digits, period, or hyphen
After the domain name, there should be a period and two or more alphabets (lowercase and uppercase)
The email address should end after the domain name
If the email address matches this pattern, it is considered a valid email address. Otherwise, it is considered invalid.